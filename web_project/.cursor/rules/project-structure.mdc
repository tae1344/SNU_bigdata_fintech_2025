---
alwaysApply: true
---

# Web Project Structure Guide

## Project Overview

This is a Next.js 15 + TypeScript project for visualizing "infidelity probability" based on user input data. It's a single-page application with multiple sections.

## Key Files

- [PRD.md](mdc:PRD.md) - Product Requirements Document
- [tasks.md](mdc:tasks.md) - Development tasks and progress tracking
- [package.json](mdc:package.json) - Dependencies and scripts

## Architecture

- **Framework**: Next.js 15 with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS v4
- **State Management**: Zustand
- **UI Components**: shadcn/ui
- **Animation**: Framer Motion

## Directory Structure

```
src/
├── app/           # Next.js App Router pages
├── components/    # Reusable UI components
│   ├── ui/       # shadcn/ui components
│   └── sections/ # Page sections
├── store/         # Zustand state management
├── lib/           # Utility functions and logic
├── types/         # TypeScript type definitions
└── styles/        # Global styles
```

## Component Organization

- Use `src/components/sections/` for page sections
- Use `src/components/ui/` for shadcn/ui components
- Export all components from `src/components/index.ts`
- Follow single responsibility principle for each component

## State Management

- Use Zustand for global state management
- Store file: `src/store/useStore.ts`
- Keep state minimal and focused
- Use TypeScript for type safety

# Web Project Structure Guide

## Project Overview

This is a Next.js 15 + TypeScript project for visualizing "infidelity probability" based on user input data. It's a single-page application with multiple sections.

## Key Files

- [PRD.md](mdc:PRD.md) - Product Requirements Document
- [tasks.md](mdc:tasks.md) - Development tasks and progress tracking
- [package.json](mdc:package.json) - Dependencies and scripts

## Architecture

- **Framework**: Next.js 15 with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS v4
- **State Management**: Zustand
- **UI Components**: shadcn/ui
- **Animation**: Framer Motion

## Directory Structure

```
src/
├── app/           # Next.js App Router pages
├── components/    # Reusable UI components
│   ├── ui/       # shadcn/ui components
│   └── sections/ # Page sections
├── store/         # Zustand state management
├── lib/           # Utility functions and logic
├── types/         # TypeScript type definitions
└── styles/        # Global styles
```

## Component Organization

- Use `src/components/sections/` for page sections
- Use `src/components/ui/` for shadcn/ui components
- Export all components from `src/components/index.ts`
- Follow single responsibility principle for each component

## State Management

- Use Zustand for global state management
- Store file: `src/store/useStore.ts`
- Keep state minimal and focused
- Use TypeScript for type safety
